using Test

using ACE11

COMMANDS = [
        # set instructions
        "set_output_1_off" => [
            0x56, 0xff, 0xff, 0x00, 0x15, 0x11, 0x01, 0x00, 0x01, 0x00, 0x00,
            0x09, 0x01, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00,
        ],
        "set_output_1_on" => [
            0x56, 0xff, 0xff, 0x00, 0x15, 0x11, 0x01, 0x00, 0x01, 0x00, 0x00,
            0x09, 0x01, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x01,
        ],
        "set_output_2_off" => [
            0x56, 0xff, 0xff, 0x00, 0x15, 0x11, 0x01, 0x00, 0x01, 0x00, 0x00,
            0x09, 0x01, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x00, 0x00,
        ],
        "set_output_2_on" => [
            0x56, 0xff, 0xff, 0x00, 0x15, 0x11, 0x01, 0x00, 0x01, 0x00, 0x00,
            0x09, 0x01, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x00, 0x01,
        ],
        "set_output_3_off" => [
            0x56, 0xff, 0xff, 0x00, 0x15, 0x11, 0x01, 0x00, 0x01, 0x00, 0x00,
            0x09, 0x01, 0x00, 0x00, 0x01, 0x00, 0x04, 0x00, 0x00, 0x00,
        ],
        "set_output_3_on" => [
            0x56, 0xff, 0xff, 0x00, 0x15, 0x11, 0x01, 0x00, 0x01, 0x00, 0x00,
            0x09, 0x01, 0x00, 0x00, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01,
        ],
        "set_output_4_off" => [
            0x56, 0xff, 0xff, 0x00, 0x15, 0x11, 0x01, 0x00, 0x01, 0x00, 0x00,
            0x09, 0x01, 0x00, 0x00, 0x01, 0x00, 0x08, 0x00, 0x00, 0x00,
        ],
        "set_output_4_on" => [
            0x56, 0xff, 0xff, 0x00, 0x15, 0x11, 0x01, 0x00, 0x01, 0x00, 0x00,
            0x09, 0x01, 0x00, 0x00, 0x01, 0x00, 0x08, 0x00, 0x00, 0x01,
        ],
        "set_output_5_off" => [
            0x56, 0xff, 0xff, 0x00, 0x15, 0x11, 0x01, 0x00, 0x01, 0x00, 0x00,
            0x09, 0x01, 0x00, 0x00, 0x01, 0x00, 0x10, 0x00, 0x00, 0x00,
        ],
        "set_output_5_on" => [
            0x56, 0xff, 0xff, 0x00, 0x15, 0x11, 0x01, 0x00, 0x01, 0x00, 0x00,
            0x09, 0x01, 0x00, 0x00, 0x01, 0x00, 0x10, 0x00, 0x00, 0x01,
        ],
        "set_output_6_off" => [
            0x56, 0xff, 0xff, 0x00, 0x15, 0x11, 0x01, 0x00, 0x01, 0x00, 0x00,
            0x09, 0x01, 0x00, 0x00, 0x01, 0x00, 0x20, 0x00, 0x00, 0x00,
        ],
        "set_output_6_on" => [
            0x56, 0xff, 0xff, 0x00, 0x15, 0x11, 0x01, 0x00, 0x01, 0x00, 0x00,
            0x09, 0x01, 0x00, 0x00, 0x01, 0x00, 0x20, 0x00, 0x00, 0x01,
        ],
        "set_output_all_on" => [
            0x56, 0xff, 0xff, 0x00, 0x15, 0x11, 0x01, 0x00, 0x01, 0x00, 0x00,
            0x09, 0x01, 0x00, 0x00, 0x01, 0x00, 0x3f, 0x00, 0x00, 0x01,
        ],
        "set_output_all_off" => [
            0x56, 0xff, 0xff, 0x00, 0x15, 0x11, 0x01, 0x00, 0x01, 0x00, 0x00,
            0x09, 0x01, 0x00, 0x00, 0x01, 0x00, 0x3f, 0x00, 0x00, 0x00,
        ],
    # read instructions
    "read_input_bits" => [
        [0x56, 0xff, 0xff, 0x00, 0x08, 0x0a, 0x00, 0x01],
        [0x56, 0xff, 0xff, 0x00, 0x08, 0x0a, 0x00, 0x02],
        [0x56, 0xff, 0xff, 0x00, 0x08, 0x0a, 0x00, 0x03],
        [0x56, 0xff, 0xff, 0x00, 0x08, 0x0a, 0x00, 0x04],
        [0x56, 0xff, 0xff, 0x00, 0x08, 0x0a, 0x00, 0x05],
        [0x56, 0xff, 0xff, 0x00, 0x08, 0x0a, 0x00, 0x06],
    ],
    "read_output_bits" => [
        [0x56, 0xff, 0xff, 0x00, 0x08, 0x0a, 0x00, 0x07],
        [0x56, 0xff, 0xff, 0x00, 0x08, 0x0a, 0x00, 0x08],
        [0x56, 0xff, 0xff, 0x00, 0x08, 0x0a, 0x00, 0x09],
        [0x56, 0xff, 0xff, 0x00, 0x08, 0x0a, 0x00, 0x0a],
        [0x56, 0xff, 0xff, 0x00, 0x08, 0x0a, 0x00, 0x0b],
        [0x56, 0xff, 0xff, 0x00, 0x08, 0x0a, 0x00, 0x0c],
    ],

] |> Dict


function test_set_command(bits, on)
    if bits == 1:6
        bitsname = "all"
    else
        bitsname = "$(bits[1])"
    end
    name = "set_output_$(bitsname)_$(on ? "on" : "off")"
    println("[+] Testing $name")
    expected = COMMANDS[name]
    received = ACE11.mk_set_command(bits, on)
    @test expected == received
end


function test_read_command(bit, output)
    io = output ? "output" : "input"
    name = "read_$(io)_bits"
    println("[+] Testing $(name)[$bit]")
    expected = COMMANDS[name][bit]
    received = ACE11.mk_read_command(bit, output)
    @test expected == received
end


for bit in 1:6
    test_read_command(bit, true)
    test_read_command(bit, false)
    bits = [bit]
    test_set_command(bits, true)
    test_set_command(bits, false)
end

#test_set_command(1:6, true)
#test_set_command(1:6, false)


